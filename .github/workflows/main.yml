name: 自动编译 windows_exporter

on:
  repository_dispatch:
  push:
    paths:
      - 'Dockerfile'
      - 'my_collectors/**'
      - 'windows_exporter/**'
  workflow_dispatch:
    inputs:
      build:
        description: '编译 windows_exporter 主程序'
        required: true
        default: '编译 windows_exporter 主程序'
  schedule:
    - cron: '0 21 * * *'
  watch:
    types: [started]

permissions:
  contents: write
  actions: write

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id || ! github.event.sender.id

    # 所有 shell 命令均使用 bash
    defaults:
      run:
        shell: bash
        
    steps:
      - name: 检出代码（包含子模块）
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: 设置 Go 环境
        uses: actions/setup-go@v5
        with:
          go-version: 'stable'

      - name: 缓存 Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: 自动注册自定义采集器
        run: |
          bash my_collectors/auto_register_collectors.sh

      - name: 安装 go-winres
        run: |
          go install github.com/tc-hib/go-winres@latest

      - name: 生成 .syso 文件
        run: |
          cd windows_exporter/cmd/windows_exporter
          go-winres make

      - name: 设置版本信息环境变量
        working-directory: windows_exporter
        run: |
          # 从远程仓库获取所有的 tag 到本地
          git fetch --tags
          # 按照 Makefile 的逻辑获取版本号
          # 1. 优先使用 VERSION 文件中的版本号
          if [ -f "VERSION" ]; then
            VERSION=$(cat VERSION | tr -d '\n\r')
            echo "从 VERSION 文件获取版本号: $VERSION"

          # 2. 使用 Git 标签作为版本号
          elif git describe --tags --abbrev=0 2>/dev/null; then
            VERSION=$(git describe --tags --abbrev=0)
            echo "从 Git 标签获取版本号: $VERSION"

          # 3. 如果有精确的标签匹配，使用精确标签
          elif git describe --tags --exact-match 2>/dev/null; then
            VERSION=$(git describe --tags --exact-match)
            echo "从精确 Git 标签获取版本号: $VERSION"

          # 4. 如果以上都没有，使用commit hash作为开发版本
          else
            VERSION="dev-$(git rev-parse --short HEAD)"
            echo "使用commit hash作为开发版本号: $VERSION"
          fi
		  
      - name: 调试版本信息
        run: |
          echo "VERSION: $VERSION"
          echo "BRANCH: $BRANCH"
          echo "REVISION: $REVISION"
          echo "BUILDUSER: $BUILDUSER"
          echo "BUILDDATE: $BUILDDATE"
          
      - name: 构建 Windows 多架构二进制文件
        working-directory: windows_exporter
        run: |
          go mod tidy
          mkdir -p ../.build/windows-amd64 ../.build/windows-arm64
          LDFLAGS="-X 'github.com/prometheus/common/version.Version=${VERSION}' -X 'github.com/prometheus/common/version.Branch=${BRANCH}' -X 'github.com/prometheus/common/version.Revision=${REVISION}' -X 'github.com/prometheus/common/version.BuildUser=${BUILDUSER}' -X 'github.com/prometheus/common/version.BuildDate=${BUILDDATE}'"
          echo "LDFLAGS: $LDFLAGS"
          CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build -ldflags="$LDFLAGS" -o ../.build/windows-amd64/windows_exporter-amd64.exe ./cmd/windows_exporter
          CGO_ENABLED=0 GOOS=windows GOARCH=arm64 go build -ldflags="$LDFLAGS" -o ../.build/windows-arm64/windows_exporter-arm64.exe ./cmd/windows_exporter

      - name: 上传 Windows 多架构二进制文件
        uses: actions/upload-artifact@v4
        with:
          name: windows_exporter-binaries
          path: |
            .build/windows-amd64/windows_exporter-amd64.exe
            .build/windows-arm64/windows_exporter-arm64.exe

      - name: 设置 QEMU（支持多平台 Docker 构建）
        uses: docker/setup-qemu-action@v3.2.0

      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3.3.0

      - name: 登录 DockerHub
        uses: docker/login-action@v3.1.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 登录 GitHub 容器仓库（ghcr.io）
        uses: docker/login-action@v3.1.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: 构建并推送 Windows 多架构 Docker 镜像到 DockerHub 和 ghcr.io
        uses: docker/build-push-action@v5.3.0
        with:
          file: ./windows_exporter/Dockerfile
          context: .
          platforms: windows/amd64
          push: true
          tags: |
            ${{ github.repository_owner }}/windows_exporter:latest
            ghcr.io/${{ github.repository_owner }}/windows_exporter:latest

      - name: 发布到 GitHub Releases
        uses: softprops/action-gh-release@v2
        with:
          tag_name: latest
          name: Latest Release
          files: |
            .build/windows-amd64/windows_exporter-amd64.exe
            .build/windows-arm64/windows_exporter-arm64.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 清理旧 Releases
        uses: dev-drprasad/delete-older-releases@v0.3.3
        with:
          keep_latest: 1
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 删除 workflow runs
        uses: Mattraks/delete-workflow-runs@main
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          retain_days: 0
          keep_minimum_runs: 1
