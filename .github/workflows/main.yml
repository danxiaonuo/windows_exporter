name: 自动编译 windows_exporter

on:
  repository_dispatch:
  push:
    paths:
      - 'Dockerfile'
      - 'my_collectors/**'
      - 'windows_exporter/**'
  workflow_dispatch:
    inputs:
      build:
        description: '编译 windows_exporter 主程序'
        required: true
        default: '编译 windows_exporter 主程序'
  schedule:
    - cron: '0 21 * * *'
  watch:
    types: [started]

permissions:
  contents: write

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id || ! github.event.sender.id

    steps:
      - name: 检出代码（包含子模块）
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: 设置 Go 环境
        uses: actions/setup-go@v5
        with:
          go-version: 'stable'

      - name: 缓存 Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: 自动注册自定义采集器
        run: |
          bash my_collectors/auto_register_collectors.sh

      - name: 安装 go-winres
        run: |
          go install github.com/tc-hib/go-winres@latest

      - name: 生成 .syso 文件
        run: |
          cd windows_exporter/cmd/windows_exporter
          go-winres make

      - name: 构建 Windows 多架构二进制文件
        run: |
          cd windows_exporter
          go mod tidy
          mkdir -p ../.build/windows-amd64 ../.build/windows-arm64
          CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build -o ../.build/windows-amd64/windows_exporter-amd64.exe ./cmd/windows_exporter
          CGO_ENABLED=0 GOOS=windows GOARCH=arm64 go build -o ../.build/windows-arm64/windows_exporter-arm64.exe ./cmd/windows_exporter

      - name: 上传 Windows 多架构二进制文件
        uses: actions/upload-artifact@v4
        with:
          name: windows_exporter-binaries
          path: |
            .build/windows-amd64/windows_exporter-amd64.exe
            .build/windows-arm64/windows_exporter-arm64.exe

      - name: 设置 QEMU（支持多平台 Docker 构建）
        uses: docker/setup-qemu-action@v3.2.0

      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3.3.0

      - name: 登录 DockerHub
        uses: docker/login-action@v3.1.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 登录 GitHub 容器仓库（ghcr.io）
        uses: docker/login-action@v3.1.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: 构建并推送 Windows 多架构 Docker 镜像到 DockerHub 和 ghcr.io
        uses: docker/build-push-action@v5.3.0
        with:
          file: ./windows_exporter/Dockerfile
          context: .
          platforms: windows/amd64
          push: true
          tags: |
            ${{ github.repository_owner }}/windows_exporter:latest
            ghcr.io/${{ github.repository_owner }}/windows_exporter:latest

      - name: 发布到 GitHub Releases
        uses: softprops/action-gh-release@v2
        with:
          tag_name: latest
          name: Latest Release
          files: |
            .build/windows-amd64/windows_exporter-amd64.exe
            .build/windows-arm64/windows_exporter-arm64.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 清理旧 Releases
        uses: dev-drprasad/delete-older-releases@v0.3.3
        with:
          keep_latest: 1
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 清理旧的 workflow artifacts
        uses: c-hive/gha-remove-artifacts@v1
        with:
          age: '1min'
          skip-recent: 1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 