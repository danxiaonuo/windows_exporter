name: '子模块自动同步'

on:
  # 手动触发工作流
  workflow_dispatch:
    inputs:
      build:
        description: '执行子模块同步'
        required: true
        default: 'build Sync'
  # 定时触发（每6小时）
  schedule:
     - cron: '* */6 * * *'
  # 点Star触发
  watch:
     types: [started]

permissions:
  contents: write
  actions: write

jobs:
  sync:
    name: '子模块自动同步'
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id || ! github.event.sender.id

    # 所有 shell 命令均使用 bash
    defaults:
      run:
        shell: bash

    steps:
    # 第一步：检出主仓库和所有子模块代码
    - name: 检出代码（包含子模块）
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.CI_TOKEN }}
        submodules: true

    # 第二步：获取最新版本信息
    - name: 获取最新版本
      run: |
        cd windows_exporter
        git fetch --tags
        LATEST_VERSION=$(git tag --sort=-version:refname | grep '^v[0-9]' | head -1)
        echo "Latest version: $LATEST_VERSION"
        echo "LATEST_VERSION=$LATEST_VERSION" >> $GITHUB_ENV

    # 第三步：检查当前版本
    - name: 检查当前版本
      run: |
        cd windows_exporter
        if [ -f "VERSION" ]; then
          CURRENT_VERSION=$(cat VERSION)
          echo "Current version from VERSION file: $CURRENT_VERSION"
        else
          # 如果VERSION文件不存在，尝试从git标签获取当前版本
          # 使用 --exact-match 确保只在当前commit正好在标签上时才返回
          CURRENT_VERSION=$(git describe --tags --exact-match 2>/dev/null || echo "unknown")
          echo "Current version from git tags: $CURRENT_VERSION"
        fi
        echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV

    # 第四步：如果版本不同则更新
    - name: 更新到最新版本
      run: |
        # 标准化版本格式，移除可能的 'v' 前缀进行比较
        CURRENT_VERSION_CLEAN=$(echo "$CURRENT_VERSION" | sed 's/^v//')
        LATEST_VERSION_CLEAN=$(echo "$LATEST_VERSION" | sed 's/^v//')

        if [ "$CURRENT_VERSION_CLEAN" != "$LATEST_VERSION_CLEAN" ] && [ "$CURRENT_VERSION" != "unknown" ]; then
          echo "Updating from $CURRENT_VERSION to $LATEST_VERSION"
          cd windows_exporter
          git checkout $LATEST_VERSION
          cd ..
          git add windows_exporter
          git config --global user.name 'Git bot'
          git config --global user.email 'bot@noreply.github.com'
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
          git commit -m "Auto update windows_exporter from $CURRENT_VERSION to $LATEST_VERSION"
          git push
        elif [ "$CURRENT_VERSION" = "unknown" ]; then
          echo "Current version is unknown, updating to latest version $LATEST_VERSION"
          cd windows_exporter
          git checkout $LATEST_VERSION
          cd ..
          git add windows_exporter
          git config --global user.name 'Git bot'
          git config --global user.email 'bot@noreply.github.com'
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
          git commit -m "Auto update windows_exporter to $LATEST_VERSION (unknown previous version)"
          git push
        else
          echo "Already at latest version $LATEST_VERSION (cleaned: $CURRENT_VERSION_CLEAN = $LATEST_VERSION_CLEAN)"
        fi

    # 第五步：删除旧的workflow runs
    - name: 删除 workflow runs
      uses: Mattraks/delete-workflow-runs@main
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        repository: ${{ github.repository }}
        retain_days: 0
        keep_minimum_runs: 1

